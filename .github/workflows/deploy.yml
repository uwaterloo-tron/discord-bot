name: Build and Deploy to Compute Engine

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCE_INSTANCE: tron-bot
  GCE_ZONE: us-central1-a
  IMAGE : discord-bot

jobs:
  deploy-bot:
    name: Build, Publish, and Deploy Bot
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            -f build/Dockerfile.bot \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Send docker-compose file and .bashrc with environment variables
      - name: Transfer Files
        run: |-
          echo """
          export ENV=prod
          export PROJECT_ID=$PROJECT_ID
          export IMAGE=$IMAGE
          export GITHUB_SHA=$GITHUB_SHA
          export DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          # fixes error with docker-compose in gcloud
          export LD_LIBRARY_PATH=/usr/local/lib
          """ > .bashrc
          gcloud --quiet compute scp .bashrc $GCE_INSTANCE:~ --zone $GCE_ZONE
          gcloud --quiet compute scp docker-compose.prod.yml $GCE_INSTANCE:~ --zone $GCE_ZONE

      # Deploy the Docker image to the GCE VM
      - name: Deploy
        run: |-
          gcloud compute ssh $GCE_INSTANCE --zone $GCE_ZONE --command \
            '
            gcloud --quiet auth configure-docker "gcr.io" && \
            docker-compose -f "docker-compose.prod.yml" up --remove-orphans --build -d && \
            docker image prune -af \
            '

      - name: Prune Container Registry
        run: |-
          echo Prune all before $(date +%F)
          ./.github/scripts/gcrgc.sh "gcr.io/$PROJECT_ID/$IMAGE" $(date +%F)

  deploy-docs:
    name: Build and Deploy Docs
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        run: |-
          docker build \
            -f build/Dockerfile.docs \
            --tag docs-image \
            .

      - name: Deploy
        run: |-
          docker container run \
            -e GITHUB_ACTOR=$GITHUB_ACTOR \
            -e GITHUB_REPOSITORY=$GITHUB_REPOSITORY \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            docs-image
