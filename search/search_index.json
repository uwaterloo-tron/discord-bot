{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tron Bot \u00b6 A discord bot created with discord.py Project outline \u00b6 Code \u00b6 The bot made of several cogs . These cogs are comprised of commands , tasks , and event listeners . Database \u00b6 The bot uses a MongoDB database which can be accessed with pymongo . Issues \u00b6 If you find a bug, typo, or something just isn't working as expected, feel free to raise an issue . You can also create an issue to suggest features or changes.","title":"Tron Bot"},{"location":"#tron-bot","text":"A discord bot created with discord.py","title":"Tron Bot"},{"location":"#project-outline","text":"","title":"Project outline"},{"location":"#code","text":"The bot made of several cogs . These cogs are comprised of commands , tasks , and event listeners .","title":"Code"},{"location":"#database","text":"The bot uses a MongoDB database which can be accessed with pymongo .","title":"Database"},{"location":"#issues","text":"If you find a bug, typo, or something just isn't working as expected, feel free to raise an issue . You can also create an issue to suggest features or changes.","title":"Issues"},{"location":"Commands/Description/","text":"Description \u00b6 This section outlines each cog, and their respective commands.","title":"Description"},{"location":"Commands/Description/#description","text":"This section outlines each cog, and their respective commands.","title":"Description"},{"location":"Commands/Cogs/FileCog/","text":"File Cog \u00b6 Feature Description Usage Heic Preview Resends .heic files to the chat as .jpg so they can be viewed without downloading send .heic file to chat Pdf Preview Sends all pages of pdf documents to chat as .jpg so they can be viewed without downloading Admin Only react to pdf file(s) with Yimin Wu emote","title":"File Cog"},{"location":"Commands/Cogs/FileCog/#file-cog","text":"Feature Description Usage Heic Preview Resends .heic files to the chat as .jpg so they can be viewed without downloading send .heic file to chat Pdf Preview Sends all pages of pdf documents to chat as .jpg so they can be viewed without downloading Admin Only react to pdf file(s) with Yimin Wu emote","title":"File Cog"},{"location":"Commands/Cogs/HabitTrackerCog/","text":"Habit Tracker Cog \u00b6 Command Description Usage /add_habit Add a tracked habit to a server (Max 2 per server) /add_habit [arguments described in discord client] /add_user_to_habit Add a user to a tracked habit list, allowing them to interact with it /add_user_to_habit [arguments described in discord client] /start_habit Starts the scheduling for the habit meaning it will start counting now and you can log /start_habit [arguments described in discord client] /log Log a type for that habit, ex push for gym, biking for cardio, 5km for run, etc /log [arguments described in discord client] /delete_habit Remove a habit from a guild /delete_habit [arguments described in discord client] /list_habits List all created habits in a guild /list_habits [arguments described in discord client]","title":"Habit Tracker Cog"},{"location":"Commands/Cogs/HabitTrackerCog/#habit-tracker-cog","text":"Command Description Usage /add_habit Add a tracked habit to a server (Max 2 per server) /add_habit [arguments described in discord client] /add_user_to_habit Add a user to a tracked habit list, allowing them to interact with it /add_user_to_habit [arguments described in discord client] /start_habit Starts the scheduling for the habit meaning it will start counting now and you can log /start_habit [arguments described in discord client] /log Log a type for that habit, ex push for gym, biking for cardio, 5km for run, etc /log [arguments described in discord client] /delete_habit Remove a habit from a guild /delete_habit [arguments described in discord client] /list_habits List all created habits in a guild /list_habits [arguments described in discord client]","title":"Habit Tracker Cog"},{"location":"Commands/Cogs/MusicCog/","text":"Music Cog \u00b6 Command Description Usage clear Clears the queue. [prefix]clear join Summons the bot to a voice channel. If no channel was specified, it joins your channel. [prefix]join [ChannelName] leave Clears the queue and leaves the voice channel. [prefix]leave loop Loops the currently playing song. Invoke again to unloop. [prefix]loop now Displays the currently playing song. [prefix]now pause Pauses the currently playing song. [prefix]pause play Plays a song. [prefix]play [SongNameOrYouTubeLink] queue Shows the music queue. You can optionally specify which page of the queue to show. [prefix]queue [page] remove Removes a song from the given position in queue. [prefix]remove [position] resume Resumes a currently paused song. [prefix]resume shuffle Shuffles the queue. [prefix]shuffle skip Vote to skip a song. The requester and admins can automatically skip. [prefix]skip volume Sets the volume of the player. If no value is provided, displays the current volume of the player. [prefix]volume [percentage]","title":"Music Cog"},{"location":"Commands/Cogs/MusicCog/#music-cog","text":"Command Description Usage clear Clears the queue. [prefix]clear join Summons the bot to a voice channel. If no channel was specified, it joins your channel. [prefix]join [ChannelName] leave Clears the queue and leaves the voice channel. [prefix]leave loop Loops the currently playing song. Invoke again to unloop. [prefix]loop now Displays the currently playing song. [prefix]now pause Pauses the currently playing song. [prefix]pause play Plays a song. [prefix]play [SongNameOrYouTubeLink] queue Shows the music queue. You can optionally specify which page of the queue to show. [prefix]queue [page] remove Removes a song from the given position in queue. [prefix]remove [position] resume Resumes a currently paused song. [prefix]resume shuffle Shuffles the queue. [prefix]shuffle skip Vote to skip a song. The requester and admins can automatically skip. [prefix]skip volume Sets the volume of the player. If no value is provided, displays the current volume of the player. [prefix]volume [percentage]","title":"Music Cog"},{"location":"Commands/Cogs/PollCog/","text":"Poll Cog \u00b6 Command Description Usage /poll Start a poll (max 8 choices). Max 5 active polls per server. /poll [arguments described in discord client] poll close Close an active poll. (In reply): [prefix]poll close poll list List all active polls for the server. [prefix]poll list poll deadline set Set a deadline for an active poll (poll automatically closes at deadline). (In reply): [prefix]poll deadline set [deadline date] poll deadline remove Remove the deadline for an active poll. (In reply): [prefix]poll deadline remove","title":"Poll Cog"},{"location":"Commands/Cogs/PollCog/#poll-cog","text":"Command Description Usage /poll Start a poll (max 8 choices). Max 5 active polls per server. /poll [arguments described in discord client] poll close Close an active poll. (In reply): [prefix]poll close poll list List all active polls for the server. [prefix]poll list poll deadline set Set a deadline for an active poll (poll automatically closes at deadline). (In reply): [prefix]poll deadline set [deadline date] poll deadline remove Remove the deadline for an active poll. (In reply): [prefix]poll deadline remove","title":"Poll Cog"},{"location":"Commands/Cogs/RoleCog/","text":"Role Cog \u00b6 Command Description Usage /RoleAdd Create a message which users can react to in order to get roles (max 5). /RoleAdd [arguments described in discord client]","title":"Role Cog"},{"location":"Commands/Cogs/RoleCog/#role-cog","text":"Command Description Usage /RoleAdd Create a message which users can react to in order to get roles (max 5). /RoleAdd [arguments described in discord client]","title":"Role Cog"},{"location":"Contributing/GettingStarted/","text":"Getting Started \u00b6 Follow this guide to learn how to set up the project, add changes, test, and merge your changes. Prerequisites \u00b6 Docker Python 3.9 .cls-1{isolation:isolate;}.cls-2{fill:url(#radial-gradient);}.cls-3{fill:url(#radial-gradient-2);}.cls-4,.cls-5,.cls-6{mix-blend-mode:multiply;}.cls-4{fill:url(#linear-gradient);}.cls-5{fill:url(#linear-gradient-2);}.cls-6{fill:url(#linear-gradient-3);}.cls-7{mix-blend-mode:screen;fill:url(#radial-gradient-3);} logo-origami Poetry Installation \u00b6 Step 1 \u00b6 If you are not in the GitHub organization ( uwaterloo-tron ): Fork the discord-bot repository to your GitHub account using the \"fork\" button on the top-right of the project repo page. Then clone it using one of the following commands: # For HTTPS git clone https://github.com/YOUR_GITHUB_USERNAME/discord-bot.git && cd discord-bot # For SSH git clone git@github.com:YOUR_GITHUB_USERNAME/discord-bot.git && cd discord-bot If you are in the GitHub organization: Clone the project repo directly using one of the following commands: # For HTTPS git clone https://github.com/uwaterloo-tron/discord-bot.git && cd discord-bot # For SSH git clone git@github.com:uwaterloo-tron/discord-bot.git && cd discord-bot NOTE: If you would like to become a member of the organization, raise an issue asking for an invitation with your Discord ID (e.g. @username#1234 ), or send a DM to @Roton#5439 on Discord including your GitHub username. We will also send you an invitation to the organization if you make any contributions. Step 2 \u00b6 Create a new branch for development: git checkout -b \"BRANCH-NAME\" Step 3 \u00b6 Run the following command in the project directory: poetry install Development \u00b6 Check out the discord.py docs for help. Here are some useful pages: Commands (functions that activate via <prefix>command-name , e.g. ?=help ) Tasks (functions which automatically run every set period of time) Event listeners (functions which run on specific Discord events, e.g. when joining a guild) Please read through the code conventions before you start If you modify the docs or database in your changes, read through their respective convention pages as well: Database conventions Documentation conventions Testing \u00b6 Set up a Discord bot for testing Invite your bot to a server where you will test it Create a file named .env in the project directory. Inside the file, add the following lines: DISCORD_TOKEN =[ paste token here ] STAGE =[ your stage ( optional )] LOG_LEVEL =[ desired log level ( optional )] Note: Don't include the square brackets Where you can get your token Which stage you should use LOG_LEVEL must be one of the following: CRITICAL , ERROR , WARNING (default), INFO , DEBUG Start the bot and database with the following command: docker-compose up --build -d If you make any changes, run this command again to update the container If you ever want to wipe the database, run this command: docker-compose down -v && docker-compose up --build -d WARNING: this cannot be undone When you are done, tear down by running the following command: docker-compose down Recommended: remove all dangling images (previous versions): docker image prune -f Creating a Pull Request \u00b6 Here's how you can add your changes to the production server for the bot. Steps \u00b6 Make sure your changes follow the code conventions and database conventions Update the docs if necessary check here for more details Commit and push your changes See this guide on how to write great commit messages Open a pull request (PR) on the main project repo That's all! Once your PR is approved, your changes will be automatically deployed to the production server. If you're still confused, check out this guide .","title":"Getting Started"},{"location":"Contributing/GettingStarted/#getting-started","text":"Follow this guide to learn how to set up the project, add changes, test, and merge your changes.","title":"Getting Started"},{"location":"Contributing/GettingStarted/#prerequisites","text":"Docker Python 3.9 .cls-1{isolation:isolate;}.cls-2{fill:url(#radial-gradient);}.cls-3{fill:url(#radial-gradient-2);}.cls-4,.cls-5,.cls-6{mix-blend-mode:multiply;}.cls-4{fill:url(#linear-gradient);}.cls-5{fill:url(#linear-gradient-2);}.cls-6{fill:url(#linear-gradient-3);}.cls-7{mix-blend-mode:screen;fill:url(#radial-gradient-3);} logo-origami Poetry","title":"Prerequisites"},{"location":"Contributing/GettingStarted/#installation","text":"","title":"Installation"},{"location":"Contributing/GettingStarted/#step-1","text":"If you are not in the GitHub organization ( uwaterloo-tron ): Fork the discord-bot repository to your GitHub account using the \"fork\" button on the top-right of the project repo page. Then clone it using one of the following commands: # For HTTPS git clone https://github.com/YOUR_GITHUB_USERNAME/discord-bot.git && cd discord-bot # For SSH git clone git@github.com:YOUR_GITHUB_USERNAME/discord-bot.git && cd discord-bot If you are in the GitHub organization: Clone the project repo directly using one of the following commands: # For HTTPS git clone https://github.com/uwaterloo-tron/discord-bot.git && cd discord-bot # For SSH git clone git@github.com:uwaterloo-tron/discord-bot.git && cd discord-bot NOTE: If you would like to become a member of the organization, raise an issue asking for an invitation with your Discord ID (e.g. @username#1234 ), or send a DM to @Roton#5439 on Discord including your GitHub username. We will also send you an invitation to the organization if you make any contributions.","title":"Step 1"},{"location":"Contributing/GettingStarted/#step-2","text":"Create a new branch for development: git checkout -b \"BRANCH-NAME\"","title":"Step 2"},{"location":"Contributing/GettingStarted/#step-3","text":"Run the following command in the project directory: poetry install","title":"Step 3"},{"location":"Contributing/GettingStarted/#development","text":"Check out the discord.py docs for help. Here are some useful pages: Commands (functions that activate via <prefix>command-name , e.g. ?=help ) Tasks (functions which automatically run every set period of time) Event listeners (functions which run on specific Discord events, e.g. when joining a guild) Please read through the code conventions before you start If you modify the docs or database in your changes, read through their respective convention pages as well: Database conventions Documentation conventions","title":"Development"},{"location":"Contributing/GettingStarted/#testing","text":"Set up a Discord bot for testing Invite your bot to a server where you will test it Create a file named .env in the project directory. Inside the file, add the following lines: DISCORD_TOKEN =[ paste token here ] STAGE =[ your stage ( optional )] LOG_LEVEL =[ desired log level ( optional )] Note: Don't include the square brackets Where you can get your token Which stage you should use LOG_LEVEL must be one of the following: CRITICAL , ERROR , WARNING (default), INFO , DEBUG Start the bot and database with the following command: docker-compose up --build -d If you make any changes, run this command again to update the container If you ever want to wipe the database, run this command: docker-compose down -v && docker-compose up --build -d WARNING: this cannot be undone When you are done, tear down by running the following command: docker-compose down Recommended: remove all dangling images (previous versions): docker image prune -f","title":"Testing"},{"location":"Contributing/GettingStarted/#creating-a-pull-request","text":"Here's how you can add your changes to the production server for the bot.","title":"Creating a Pull Request"},{"location":"Contributing/GettingStarted/#steps","text":"Make sure your changes follow the code conventions and database conventions Update the docs if necessary check here for more details Commit and push your changes See this guide on how to write great commit messages Open a pull request (PR) on the main project repo That's all! Once your PR is approved, your changes will be automatically deployed to the production server. If you're still confused, check out this guide .","title":"Steps"},{"location":"Contributing/Convention%20Guidelines/code/","text":"Code Conventions \u00b6 General \u00b6 In general, all functionality (commands, tasks, event listeners, etc.) should be added to cogs , not the bot itself Cogs should not depend on each other if possible Try to add typing where possible Add logging where appropriate Comment your code! ( docstrings are a great way to explain how your commands work) Always format your code with Black before committing (your build will fail if you don't) For VSCode, you can set the formatting provider to \"black\" in your settings. Check this guide . For PyCharm or IntelliJ, try the BlackConnect plugin . New Cogs \u00b6 Create a new file in the cogs directory named <something>_cog.py with the following template: from discord.ext import tasks , commands import config # Note: config.db is the database. TODO remove this line # TODO rename SomethingCog class SomethingCog ( commands . Cog ): def __init__ ( self , bot ): self . bot = bot # TODO add stuff here def setup ( bot ): # Adds cog to bot from main.py bot . add_cog ( SomethingCog ( bot ))","title":"Code Conventions"},{"location":"Contributing/Convention%20Guidelines/code/#code-conventions","text":"","title":"Code Conventions"},{"location":"Contributing/Convention%20Guidelines/code/#general","text":"In general, all functionality (commands, tasks, event listeners, etc.) should be added to cogs , not the bot itself Cogs should not depend on each other if possible Try to add typing where possible Add logging where appropriate Comment your code! ( docstrings are a great way to explain how your commands work) Always format your code with Black before committing (your build will fail if you don't) For VSCode, you can set the formatting provider to \"black\" in your settings. Check this guide . For PyCharm or IntelliJ, try the BlackConnect plugin .","title":"General"},{"location":"Contributing/Convention%20Guidelines/code/#new-cogs","text":"Create a new file in the cogs directory named <something>_cog.py with the following template: from discord.ext import tasks , commands import config # Note: config.db is the database. TODO remove this line # TODO rename SomethingCog class SomethingCog ( commands . Cog ): def __init__ ( self , bot ): self . bot = bot # TODO add stuff here def setup ( bot ): # Adds cog to bot from main.py bot . add_cog ( SomethingCog ( bot ))","title":"New Cogs"},{"location":"Contributing/Convention%20Guidelines/database/","text":"Database Conventions \u00b6 Under Construction Don't use any databases other than the one named discord . Feel free to make new collections if you want.","title":"Database Conventions"},{"location":"Contributing/Convention%20Guidelines/database/#database-conventions","text":"Under Construction Don't use any databases other than the one named discord . Feel free to make new collections if you want.","title":"Database Conventions"},{"location":"Contributing/Convention%20Guidelines/documentation/","text":"Documentation \u00b6 To see what your changes will look like in the docs, follow the guide here Documentation Testing Adding a new cog \u00b6 If you create a new cog, create a new markdown file in docs/Commands/Cogs/ . The filename and header should be identical to your cog's class name. In the markdown file, explain the function of the cog and what each command does. Add comments in your code explaining the use of any event listeners or tasks. Modifying a cog \u00b6 Update the modified cog's markdown file as necessary.","title":"Documentation"},{"location":"Contributing/Convention%20Guidelines/documentation/#documentation","text":"To see what your changes will look like in the docs, follow the guide here Documentation Testing","title":"Documentation"},{"location":"Contributing/Convention%20Guidelines/documentation/#adding-a-new-cog","text":"If you create a new cog, create a new markdown file in docs/Commands/Cogs/ . The filename and header should be identical to your cog's class name. In the markdown file, explain the function of the cog and what each command does. Add comments in your code explaining the use of any event listeners or tasks.","title":"Adding a new cog"},{"location":"Contributing/Convention%20Guidelines/documentation/#modifying-a-cog","text":"Update the modified cog's markdown file as necessary.","title":"Modifying a cog"},{"location":"Contributing/Testing/database/","text":"Database Testing \u00b6 When running the bot and database locally, you can access the database with the following command: docker exec -it discord-bot-db mongo You will need to use mongo shell commands from here to modify the database. Note: the database for the bot is named \"discord\" Alternatively, you can try MongoDB Compass if you prefer a more visual approach. The database container has its port 27017 mapped to your machine's port 27017 , so you can connect through localhost.","title":"Database Testing"},{"location":"Contributing/Testing/database/#database-testing","text":"When running the bot and database locally, you can access the database with the following command: docker exec -it discord-bot-db mongo You will need to use mongo shell commands from here to modify the database. Note: the database for the bot is named \"discord\" Alternatively, you can try MongoDB Compass if you prefer a more visual approach. The database container has its port 27017 mapped to your machine's port 27017 , so you can connect through localhost.","title":"Database Testing"},{"location":"Contributing/Testing/discord_bot/","text":"Setting up a Discord bot \u00b6 You will need your own Discord bot to test your changes locally. Note: the images and content of the following guide were taken or summarized from this article on freecodecamp.org by Beau Carnes . Creating the Bot \u00b6 1. Make sure you\u2019re logged on to the Discord website . 2. Go to this page application page . 3. Click on the \u201cNew Application\u201d button. 4. Give the application a name and click \u201cCreate\u201d. 5. Go to the \u201cBot\u201d tab and then click \u201cAdd Bot\u201d. You will have to confirm by clicking \"Yes, do it!\" 6. Make sure the bot settings are identical to the ones shown in the following image: That's it! Your bot has been created! Inviting the Bot to your Server \u00b6 Go to the \"OAuth2\" tab of your Discord application. Then select \"bot\" and \"applications.commands\" under the \"scopes\" section. Then check the \"Administrator\" permission and press the 'copy' button above the permissions. Paste the URL into your browser, choose a server to invite the bot to, and click \u201cAuthorize\u201d. To add the bot, your account needs \"Manage Server\" permissions. Getting your Bot Token \u00b6 You will need this to run the project with your bot. Go to your bot's page and press the 'copy' button. Do not share this token anywhere! It gives access to run any script on your bot. You can regenerate the token if it accidentally gets shared.","title":"Setting up a Discord bot"},{"location":"Contributing/Testing/discord_bot/#setting-up-a-discord-bot","text":"You will need your own Discord bot to test your changes locally. Note: the images and content of the following guide were taken or summarized from this article on freecodecamp.org by Beau Carnes .","title":"Setting up a Discord bot"},{"location":"Contributing/Testing/discord_bot/#creating-the-bot","text":"1. Make sure you\u2019re logged on to the Discord website . 2. Go to this page application page . 3. Click on the \u201cNew Application\u201d button. 4. Give the application a name and click \u201cCreate\u201d. 5. Go to the \u201cBot\u201d tab and then click \u201cAdd Bot\u201d. You will have to confirm by clicking \"Yes, do it!\" 6. Make sure the bot settings are identical to the ones shown in the following image: That's it! Your bot has been created!","title":"Creating the Bot"},{"location":"Contributing/Testing/discord_bot/#inviting-the-bot-to-your-server","text":"Go to the \"OAuth2\" tab of your Discord application. Then select \"bot\" and \"applications.commands\" under the \"scopes\" section. Then check the \"Administrator\" permission and press the 'copy' button above the permissions. Paste the URL into your browser, choose a server to invite the bot to, and click \u201cAuthorize\u201d. To add the bot, your account needs \"Manage Server\" permissions.","title":"Inviting the Bot to your Server"},{"location":"Contributing/Testing/discord_bot/#getting-your-bot-token","text":"You will need this to run the project with your bot. Go to your bot's page and press the 'copy' button. Do not share this token anywhere! It gives access to run any script on your bot. You can regenerate the token if it accidentally gets shared.","title":"Getting your Bot Token"},{"location":"Contributing/Testing/documentation/","text":"Documentation Testing \u00b6 The docs are built using mkdocs . To see what your changes to the docs will look like, run poetry run mkdocs serve . This will only work if you previously ran poetry install .","title":"Documentation Testing"},{"location":"Contributing/Testing/documentation/#documentation-testing","text":"The docs are built using mkdocs . To see what your changes to the docs will look like, run poetry run mkdocs serve . This will only work if you previously ran poetry install .","title":"Documentation Testing"},{"location":"Contributing/Testing/stages/","text":"Stages \u00b6 For reference when you're developing: The environment variable STAGE states what environment the bot is running in. It can be one of the following: dev (default if none is provided): Enables cheats, dev tools, etc. Use this while you're working on adding features staging : Used to test how your features will work in prod Should be identical to prod, with very few exceptions (e.g. Certain features that can only work in the production environment) prod : Reserved for the production server. Use staging instead. You can add code into the bot to enable dev tools and configurations with this. The value of your selected stage is stored in a variable named STAGE in config.py . Example: from discord.ext import commands import config class SomeCog ( commands . Cog ): def __init__ ( self , bot ): self . bot = bot @commands . command () async def buy ( self , ctx , item ): # buy an item from the shop # item is free if in dev stage price_of_item = 1000 if config . STAGE != 'dev' else 0 ...","title":"Stages"},{"location":"Contributing/Testing/stages/#stages","text":"For reference when you're developing: The environment variable STAGE states what environment the bot is running in. It can be one of the following: dev (default if none is provided): Enables cheats, dev tools, etc. Use this while you're working on adding features staging : Used to test how your features will work in prod Should be identical to prod, with very few exceptions (e.g. Certain features that can only work in the production environment) prod : Reserved for the production server. Use staging instead. You can add code into the bot to enable dev tools and configurations with this. The value of your selected stage is stored in a variable named STAGE in config.py . Example: from discord.ext import commands import config class SomeCog ( commands . Cog ): def __init__ ( self , bot ): self . bot = bot @commands . command () async def buy ( self , ctx , item ): # buy an item from the shop # item is free if in dev stage price_of_item = 1000 if config . STAGE != 'dev' else 0 ...","title":"Stages"}]}